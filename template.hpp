
#include <type_traits>
#define REFLECT_CLASS(type)
#define REFLECT_FUNCTION(FUNC_NAME)
#define REFLECT_VARIABLE(TYPE, NAME)
#define REGISTER_REFLECTION()

#include "type_helper.hpp"
#include <unordered_map>

class RObject
{

    // generated by macro
    // parent info
    // my type
    // static constexpr unordered map <std::string, RClass> -> for property // frozen map
    // static constexpr unordered map <std::string, RFunction> -> for functions // frozen map
};

class RType : public RObject
{
};
class RFunction : public RType
{
};
class RClass : public RType
{
};

class Test : public RObject
{
    REFLECT_CLASS(Test)
    /*
    static RClass const& GetRClass();
    using RCInit = RCInitiailizer<ThisType>;
    using TypeList = typename RCInit::TypeList;
    */

public:
    /*
        static constexpr GFunctionStaticInfo<int, int> addInfo{};

        build function type
        using FunctionType = ...;
        using TypeList = RCInit::Concat<TypeList, FunctionType> ... ;
     */
    REFLECT_FUNCTION(add, int, int)
    int add(int a, int b);

    int add(int a, int b, float c);

    REFLECT_FUNCTION(mult)
    /*
        build function type
        using FunctionType = ...;
        using TypeList = RCInit::Concat<TypeList, FunctionType> ... ;
     */
    int mul(int a, int b);

private:
    REFLECT_VARIABLE(int, arr_size)

    REGISTER_REFLECTION();
    /*


    */
};

class TestGen : public RObject
{
    static constexpr RClass GetRClass();
};
